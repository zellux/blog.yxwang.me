<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Aiur · Zellux 的博客</title>
    <link>https://blog.yxwang.me/tags/linux/</link>
    <description>Recent content in Linux on Aiur · Zellux 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 02 Mar 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.yxwang.me/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用 netgrowl 向 Windows / Mac OS X 发送消息</title>
      <link>https://blog.yxwang.me/2011/03/send-notifications-with-netgrowl/</link>
      <pubDate>Wed, 02 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2011/03/send-notifications-with-netgrowl/</guid>
      <description>我平时用的系统是 Windows 7 和 Mac OS X，实验室项目一般都是 ssh 远登到 Ubuntu 和 Linux 上开发的。有时碰到内核和虚拟机等项目编译比较耗时，编译开始后要时不时的看一下编译任务是否完成，或者有没有中途出错，这时候如果有个通知系统就比较方便了。
Google 了一把找到了 netgrowl这个好东东，它是一个开源的 Python 模块，实现了 Growl 协议，可以向 Mac 或 Windows 上的 Growl 服务发送通知。使用也非常方便，先用 GrowlRegistrationPacket 函数注册一个应用，接着就可以用 GrowlNotificationPacket 发送通知了：
notify.py#!/usr/bin/python from netgrowl import * import sys title = &amp;#34;Notification from Ubuntu&amp;#34; desc = &amp;#34;&amp;#34; if len(sys.argv) &amp;gt; 2: title = sys.argv[1] desc = sys.argv[2] addr = (&amp;#34;10.131.251.101&amp;#34;, GROWL_UDP_PORT) s = socket(AF_INET,SOCK_DGRAM) p = GrowlRegistrationPacket(application=&amp;#34;Ubuntu&amp;#34;, password=&amp;#34;i&amp;#34;) p.addNotification(&amp;#34;Ubuntu Notifications&amp;#34;, enabled=True) s.sendto(p.payload(), addr) p = GrowlNotificationPacket(application=&amp;#34;Ubuntu&amp;#34;, notification=&amp;#34;Ubuntu Notifications&amp;#34;, title=title, description=desc, priority=1, sticky=True, password=&amp;#34;i&amp;#34;) s.</description>
    </item>
    
    <item>
      <title>记录 GNU screen 中的历史命令</title>
      <link>https://blog.yxwang.me/2010/03/keep-gnu-screen-history/</link>
      <pubDate>Mon, 01 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2010/03/keep-gnu-screen-history/</guid>
      <description>GNU screen中执行的历史命令保存在内存中，默认情况下并不会像在bash中直接执行的命令一样保存在.bash_history中，这在某些场合下带来了一定的不便。
在superuser上看到一个解决方法，指定历史文件的读写方式为追加，并在每次命令行提示符显示的时候，自动更新bash的历史命令记录。要实现这个方法很简单，只要在.bashrc中加入下面两行代码即可
shopt -s histappend export PROMPT_COMMAND=&amp;#34;history -a; history -n&amp;#34; 另外如果之前设置过PROMPT_COMMAND的话，只要在history -a前加入$PROMPT_COMMAND;就行了。</description>
    </item>
    
    <item>
      <title>使用 grep 查找进程的技巧</title>
      <link>https://blog.yxwang.me/2010/01/grep-trick/</link>
      <pubDate>Thu, 21 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2010/01/grep-trick/</guid>
      <description>使用grep在ps aux的输出结果中查找进程的时候经常会把grep进程本身也找出来，比如查找emacs进程：
$ ps aux | grep emacs wyx 7090 0.0 0.0 3336 796 pts/2 S+ 04:49 0:00 grep emacs wyx 10128 0.1 4.9 66904 50388 pts/3 S+ Jan21 2:21 emacs 一个常见的防止grep进程出现的方法就是在后面再加一个grep -v grep：
$ ps aux | grep emacs | grep -v grep wyx 10128 0.1 4.9 66904 50388 pts/3 S+ Jan21 2:21 emacs 今天在Santosa的博客上看到了另一个巧妙的做法，使用grep [e]macs来搜索emacs这个进程：
$ ps aux | grep [e]macs wyx 10128 0.1 4.9 66904 50388 pts/3 S+ Jan21 2:21 emacs 为什么会有这样的效果，知道grep正则中[]的作用后想一想就能明白啦。很有意思的trick，虽然说它比| grep -v grep也未必方便多少，因为后者能通过alias简化输入。</description>
    </item>
    
  </channel>
</rss>