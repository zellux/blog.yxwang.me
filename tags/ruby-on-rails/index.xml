<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails on Aiur · Zellux 的博客</title>
    <link>https://blog.yxwang.me/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on Aiur · Zellux 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 18 Feb 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.yxwang.me/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用 ETag 优化 Rails 应用</title>
      <link>https://blog.yxwang.me/2012/02/etags-in-rails/</link>
      <pubDate>Sat, 18 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2012/02/etags-in-rails/</guid>
      <description>&lt;p&gt;ETag 是 HTTP 协议的一部分，可以用来检测客户端的缓存是否仍然有效。不少网站都实现了对 ETag 的支持，在 HTTP 响应头中加入当前传送内容的 ETag。以 heroku.com 为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -I www.heroku.com
HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK
Server: nginx
Date: Fri, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; Feb &lt;span style=&#34;color:#ae81ff&#34;&gt;2012&lt;/span&gt; 17:36:44 GMT
Content-Type: text/html; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf-8
Connection: keep-alive
Etag: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f74bb78aa48d36e6a0b2072a131b20b9&amp;#34;&lt;/span&gt;
Cache-Control: public, max-age&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
Content-Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;15481&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ActiveRecord 的一些细节</title>
      <link>https://blog.yxwang.me/2011/11/notes-on-active-record/</link>
      <pubDate>Thu, 24 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2011/11/notes-on-active-record/</guid>
      <description>对象属性 ActiveRecord 对象在数据库中的属性并不是以实体变量的方式保存的，如果要为一个属性设置默认值的话，
class Item &amp;lt; ActiveRecord::Base def category @category || &amp;#39;n/a&amp;#39; end end 这样的实现是不可行的。读取和修改这些属性时应该使用 read_attribute 和 write_attribute：
class Item &amp;lt; ActiveRecord::Base def category read_attribute(:category) || &amp;#39;n/a&amp;#39; end end Hash 和相等性 ActiveRecord 的 hash 值是根据主键的值计算出来的，这就意味着未保存对象的 hash 值是不可靠的。同样两个 model 对象的相等比较（即==操作符）也是基于主键的，所以两个 model 对象即使它们的其他属性不一样，仍有可能被当作相等。
查找 find_by_attribute 方法后面加个 ! 号，即使用 find_by_attribute!，就能在找不到对象的时候触发一个 RecordNotFound 异常，而不是返回 nil。
find_or_initialize_by 和 find_or_create_by 也是两个好用的方法，它们在找不到对象时分别使用 new 和 create 新建一个，并用查找的属性初始化新建的对象。
手写 SQL 不得不手写 SQL 同时又要防止注入攻击的一个比较简洁的写法是
Order.where(&amp;#34;name = :name and pay_type = :pay_type&amp;#34;, params[:order]) 回调函数 出于性能考虑，after_find 和 after_initialize 只能通过函数声明的方式定义，即不能用类似 before_validation :normalize_fields 这样的形式。</description>
    </item>
    
    <item>
      <title>Rails 中 render 方法的可选参数</title>
      <link>https://blog.yxwang.me/2011/11/options-for-render/</link>
      <pubDate>Sun, 20 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2011/11/options-for-render/</guid>
      <description>:content_type 设置返回内容的 MIME 类型
render :file =&amp;gt; filename, :content_type =&amp;gt; &amp;#39;application/rss&amp;#39; :layout 指定 layout
:status 指定返回的 HTTP 代码
:location 指定 HTTP 头中的 Location 字段
Rails 生成的 controller 代码中，create.json 方法在生成对象后会将 Location 设置为新生成对象的 json 地址：
respond_to do |format| if @item.save format.html { redirect_to @item, notice: &amp;#39;Item was successfully created.&amp;#39; } format.json { render json: @item, status: :created, location: @item } else format.html { render action: &amp;#34;new&amp;#34; } format.json { render json: @item.errors, status: :unprocessable_entity } end end 参考：http://guides.</description>
    </item>
    
    <item>
      <title>rspec 跳过指定测试</title>
      <link>https://blog.yxwang.me/2011/11/skip-specs-by-tags/</link>
      <pubDate>Sun, 20 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.yxwang.me/2011/11/skip-specs-by-tags/</guid>
      <description>有些测试比较耗时间，而且很少被修改，如果能在测试的时候跳过它们就能让 spec 快不少。
跳过测试的方法很简单，spec 的 describe 方法可以给对应的测试加上标签，例如
describe SalesController, :slow =&amp;gt; true do # specs end 接下来只要在 spec/spec_helper.rb 中声明跳过这个标签即可：
RSpec.configure do |config| config.filter_run_excluding :slow =&amp;gt; true end 与 filter_run_excluding 相反的是 filter_run，指定会被运行的标签，不包含在这个列表中的测试将被忽略。
参考：http://www.dixis.com/?p=283</description>
    </item>
    
  </channel>
</rss>